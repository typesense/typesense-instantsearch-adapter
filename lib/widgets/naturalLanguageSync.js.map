{"version":3,"file":"naturalLanguageSync.js","names":["_interopRequireDefault","require","Object","defineProperty","exports","value","connectNaturalLanguageSync","naturalLanguageSync","_toConsumableArray2","_defineProperty2","ownKeys","e","r","t","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","renderFn","unmountFn","undefined","widgetParams","connectorState","lastAppliedStateKey","applicationCount","settingState","$$type","$$widgetType","init","initOptions","instantSearchInstance","getWidgetRenderState","render","renderOptions","dispose","results","hasNaturalLanguageData","_hasNaturalLanguageData","_applyNaturalLanguageState","appliedState","_getLastAppliedState","isActive","debug","lastParsedQuery","parsed_nl_query","lastAppliedState","getRenderState","renderState","getWidgetUiState","uiState","getWidgetSearchParameters","searchParameters","_results$parsed_nl_qu","_naturalLanguageUiState","generated_params","_results$parsed_nl_qu2","uiStateToApply","_parseGeneratedParamsToUiState","stateKey","_createStateKey","onStateChange","_setInstantSearchUiState","generatedParams","filter_by","_this$_parseTypesense","_parseTypesenseFiltersToUiState","refinementList","numericMenu","sort_by","sortBy","filterBy","ast","_parseFilterExpression","_processFilterAST","error","_tokenizeFilter","tokens","current","inQuotes","quoteChar","i","char","operatorMap","operator","type","operatorFound","_i","_operatorMap","_operatorMap$_i","substring","trim","_handleSpecialChar","shouldContinue","_handleSpace","lastToken","charMap","position","nextNonSpacePos","_findNextNonSpace","lookAhead","_checkForOperatorAhead","isOperatorOrSpecial","str","startPos","_i2","_operatorMap2","_operatorMap2$_i","includes","_parseAndExpression","node","start","_this$_parseOrExpress","_parseOrExpression","left","_tokens$position","_this$_parseOrExpress2","right","newPos","_this$_parseFilterCon","_parseFilterCondition","_tokens$position2","_this$_parseFilterCon2","_tokens$start","_tokens$position3","_tokens$position8","_tokens$_position","_this$_parseAndExpres","Error","field","concat","_tokens$position7","values","_tokens$position4","_tokens$position5","_tokens$position6","_processOrCondition","_processCondition","_this","conditions","_collectOrConditions","fieldGroups","condition","fieldConditions","_isNumericCondition","_processNumericCondition","_processFacetCondition","Array","isArray","_isRangePattern","dotDotIndex","indexOf","end","_isNumericValue","trimmed","num","parseFloat","isNaN","isFinite","toString","_parseRangePattern","_removeQuotes","quoteChars","first","last","key","sort","join","rangeData","_this2","val","cleanValue","_addToRefinementList","fieldName","currentUiState","getUiState","indexName","mainIndex","getIndexName","newIndexState","newUiState","setUiState","setTimeout","console","params","_params$debug","createWidget","_default"],"sources":["../../src/widgets/naturalLanguageSync.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Connector for natural language search synchronization\n * Handles the logic of detecting and applying natural language UI state\n */\nexport function connectNaturalLanguageSync(renderFn, unmountFn = () => {}) {\n  return function naturalLanguageSync(widgetParams = {}) {\n    const connectorState = {\n      lastAppliedStateKey: null,\n      applicationCount: 0,\n      settingState: false,\n    };\n\n    return {\n      $$type: \"typesense.naturalLanguageSync\",\n      $$widgetType: \"typesense.naturalLanguageSync\",\n\n      init(initOptions) {\n        const { instantSearchInstance } = initOptions;\n\n        renderFn(\n          {\n            ...this.getWidgetRenderState(initOptions),\n            instantSearchInstance,\n          },\n          true,\n        );\n      },\n\n      render(renderOptions) {\n        const { instantSearchInstance } = renderOptions;\n\n        renderFn(\n          {\n            ...this.getWidgetRenderState(renderOptions),\n            instantSearchInstance,\n          },\n          false,\n        );\n      },\n\n      dispose() {\n        unmountFn();\n      },\n\n      getWidgetRenderState(renderOptions) {\n        const { results, instantSearchInstance } = renderOptions;\n        const hasNaturalLanguageData = this._hasNaturalLanguageData(results);\n\n        if (hasNaturalLanguageData && results && !connectorState.settingState) {\n          this._applyNaturalLanguageState(results, instantSearchInstance);\n        }\n\n        return {\n          appliedState: this._getLastAppliedState(),\n          isActive: hasNaturalLanguageData,\n          debug: widgetParams.debug\n            ? {\n                lastParsedQuery: results?.parsed_nl_query,\n                lastAppliedState: this._getLastAppliedState(),\n                applicationCount: connectorState.applicationCount,\n              }\n            : undefined,\n          widgetParams,\n        };\n      },\n\n      getRenderState(renderState, renderOptions) {\n        return {\n          ...renderState,\n          naturalLanguageSync: this.getWidgetRenderState(renderOptions),\n        };\n      },\n\n      getWidgetUiState(uiState) {\n        return uiState;\n      },\n\n      getWidgetSearchParameters(searchParameters) {\n        return searchParameters;\n      },\n\n      _hasNaturalLanguageData(results) {\n        return !!(results?._naturalLanguageUiState || results?.parsed_nl_query?.generated_params);\n      },\n\n      _getLastAppliedState() {\n        return null;\n      },\n\n      _applyNaturalLanguageState(results, instantSearchInstance) {\n        let uiStateToApply = null;\n\n        if (results._naturalLanguageUiState) {\n          uiStateToApply = results._naturalLanguageUiState;\n        } else if (results.parsed_nl_query?.generated_params) {\n          uiStateToApply = this._parseGeneratedParamsToUiState(results.parsed_nl_query.generated_params);\n        }\n\n        if (!uiStateToApply) {\n          return;\n        }\n\n        // Check if we've already applied this exact state to prevent infinite loops\n        const stateKey = this._createStateKey(uiStateToApply);\n        if (connectorState.lastAppliedStateKey === stateKey) {\n          return;\n        }\n\n        if (widgetParams.onStateChange) {\n          widgetParams.onStateChange(uiStateToApply);\n        }\n\n        this._setInstantSearchUiState(uiStateToApply, instantSearchInstance);\n\n        connectorState.lastAppliedStateKey = stateKey;\n        connectorState.applicationCount++;\n      },\n\n      _parseGeneratedParamsToUiState(generatedParams) {\n        const uiState = {};\n\n        if (generatedParams.filter_by) {\n          const { refinementList, numericMenu } = this._parseTypesenseFiltersToUiState(generatedParams.filter_by);\n\n          if (Object.keys(refinementList).length > 0) {\n            uiState.refinementList = refinementList;\n          }\n\n          if (Object.keys(numericMenu).length > 0) {\n            uiState.numericMenu = numericMenu;\n          }\n        }\n\n        if (generatedParams.sort_by) {\n          uiState.sortBy = generatedParams.sort_by;\n        }\n\n        return uiState;\n      },\n\n      _parseTypesenseFiltersToUiState(filterBy) {\n        const refinementList = {};\n        const numericMenu = {};\n\n        if (!filterBy) {\n          return { refinementList, numericMenu };\n        }\n\n        try {\n          const ast = this._parseFilterExpression(filterBy);\n          this._processFilterAST(ast, refinementList, numericMenu);\n        } catch (error) {\n          return { refinementList: {}, numericMenu: {} };\n        }\n\n        return { refinementList, numericMenu };\n      },\n\n      _tokenizeFilter(filterBy) {\n        const tokens = [];\n        let current = \"\";\n        let inQuotes = false;\n        let quoteChar = \"\";\n        let i = 0;\n\n        while (i < filterBy.length) {\n          const char = filterBy[i];\n\n          if ((char === '\"' || char === \"'\" || char === \"`\") && !inQuotes) {\n            inQuotes = true;\n            quoteChar = char;\n            current += char;\n          } else if (char === quoteChar && inQuotes) {\n            inQuotes = false;\n            current += char;\n            quoteChar = \"\";\n          } else if (inQuotes) {\n            current += char;\n          } else {\n            const operatorMap = [\n              { operator: \":<=\", type: \"OPERATOR\", length: 3 },\n              { operator: \":>=\", type: \"OPERATOR\", length: 3 },\n              { operator: \"&&\", type: \"AND\", length: 2 },\n              { operator: \"||\", type: \"OR\", length: 2 },\n              { operator: \":=\", type: \"OPERATOR\", length: 2 },\n              { operator: \":<\", type: \"OPERATOR\", length: 2 },\n              { operator: \":>\", type: \"OPERATOR\", length: 2 },\n              { operator: \":\", type: \"OPERATOR\", length: 1 },\n            ];\n\n            let operatorFound = false;\n\n            for (const { operator, type, length } of operatorMap) {\n              if (filterBy.substring(i, i + length) === operator) {\n                if (current.trim()) {\n                  if (type === \"AND\" || type === \"OR\") {\n                    tokens.push({ type: \"VALUE\", value: current.trim() });\n                  } else {\n                    tokens.push({ type: \"FIELD\", value: current.trim() });\n                  }\n                }\n\n                tokens.push({ type, value: operator });\n                current = \"\";\n                i += length - 1;\n                operatorFound = true;\n                break;\n              }\n            }\n\n            if (!operatorFound) {\n              if (char === \"(\" || char === \")\" || char === \"[\" || char === \"]\" || char === \",\") {\n                this._handleSpecialChar(char, current, tokens);\n                current = \"\";\n              } else if (char === \" \") {\n                const shouldContinue = this._handleSpace(current, tokens, filterBy, i);\n                if (shouldContinue) {\n                  current += char;\n                } else {\n                  current = \"\";\n                }\n              } else {\n                current += char;\n              }\n            }\n          }\n\n          i++;\n        }\n\n        if (current.trim()) {\n          const lastToken = tokens[tokens.length - 1];\n          if (!lastToken || lastToken.type === \"AND\" || lastToken.type === \"OR\" || lastToken.type === \"LPAREN\") {\n            tokens.push({ type: \"FIELD\", value: current.trim() });\n          } else {\n            tokens.push({ type: \"VALUE\", value: current.trim() });\n          }\n        }\n\n        return tokens;\n      },\n\n      _handleSpecialChar(char, current, tokens) {\n        if (current.trim()) {\n          tokens.push({ type: \"VALUE\", value: current.trim() });\n        }\n\n        const charMap = {\n          \"(\": { type: \"LPAREN\", value: \"(\" },\n          \")\": { type: \"RPAREN\", value: \")\" },\n          \"[\": { type: \"LBRACKET\", value: \"[\" },\n          \"]\": { type: \"RBRACKET\", value: \"]\" },\n          \",\": { type: \"COMMA\", value: \",\" },\n        };\n\n        // For '[', the current should be treated as a FIELD, not VALUE\n        if (char === \"[\" && current.trim()) {\n          tokens[tokens.length - 1].type = \"FIELD\";\n        }\n\n        tokens.push(charMap[char]);\n      },\n\n      _handleSpace(current, tokens, filterBy, position) {\n        if (!current.trim()) return false;\n\n        const nextNonSpacePos = this._findNextNonSpace(filterBy, position + 1);\n        if (nextNonSpacePos !== -1) {\n          const lookAhead = this._checkForOperatorAhead(filterBy, nextNonSpacePos);\n\n          if (lookAhead.isOperatorOrSpecial) {\n            const lastToken = tokens[tokens.length - 1];\n            if (!lastToken || lastToken.type === \"AND\" || lastToken.type === \"OR\" || lastToken.type === \"LPAREN\") {\n              tokens.push({ type: \"FIELD\", value: current.trim() });\n            } else {\n              tokens.push({ type: \"VALUE\", value: current.trim() });\n            }\n            return false;\n          }\n        }\n\n        return true;\n      },\n\n      _findNextNonSpace(str, startPos) {\n        for (let i = startPos; i < str.length; i++) {\n          if (str[i] !== \" \") {\n            return i;\n          }\n        }\n        return -1;\n      },\n\n      _checkForOperatorAhead(filterBy, position) {\n        const operatorMap = [\n          { operator: \":<=\", length: 3 },\n          { operator: \":>=\", length: 3 },\n          { operator: \"&&\", length: 2 },\n          { operator: \"||\", length: 2 },\n          { operator: \":=\", length: 2 },\n          { operator: \":<\", length: 2 },\n          { operator: \":>\", length: 2 },\n          { operator: \":\", length: 1 },\n        ];\n\n        for (const { operator, length } of operatorMap) {\n          if (filterBy.substring(position, position + length) === operator) {\n            return { isOperatorOrSpecial: true, operator, length };\n          }\n        }\n\n        const char = filterBy[position];\n        if ([\"(\", \")\", \"[\", \"]\", \",\"].includes(char)) {\n          return { isOperatorOrSpecial: true, operator: char, length: 1 };\n        }\n\n        return { isOperatorOrSpecial: false };\n      },\n\n      _parseFilterExpression(filterBy) {\n        const tokens = this._tokenizeFilter(filterBy);\n\n        return this._parseAndExpression(tokens, 0).node;\n      },\n\n      _parseAndExpression(tokens, start) {\n        let { node: left, position } = this._parseOrExpression(tokens, start);\n\n        while (position < tokens.length && tokens[position]?.type === \"AND\") {\n          position++; // skip AND\n          const { node: right, position: newPos } = this._parseOrExpression(tokens, position);\n          left = { type: \"AND\", left, right };\n          position = newPos;\n        }\n\n        return { node: left, position };\n      },\n\n      _parseOrExpression(tokens, start) {\n        let { node: left, position } = this._parseFilterCondition(tokens, start);\n\n        while (position < tokens.length && tokens[position]?.type === \"OR\") {\n          position++; // skip OR\n          const { node: right, position: newPos } = this._parseFilterCondition(tokens, position);\n          left = { type: \"OR\", left, right };\n          position = newPos;\n        }\n\n        return { node: left, position };\n      },\n\n      _parseFilterCondition(tokens, start) {\n        if (tokens[start]?.type === \"LPAREN\") {\n          const { node, position } = this._parseAndExpression(tokens, start + 1);\n          if (tokens[position]?.type !== \"RPAREN\") {\n            throw new Error(\"Missing closing parenthesis\");\n          }\n          return { node, position: position + 1 };\n        }\n\n        // parse field:operator:value\n        const field = tokens[start];\n        const operator = tokens[start + 1];\n        let position = start + 2;\n\n        if (!field || !operator || field.type !== \"FIELD\" || operator.type !== \"OPERATOR\") {\n          throw new Error(`Invalid filter condition at position ${start}`);\n        }\n\n        let value;\n\n        // handle array values [val1,val2,...]\n        if (tokens[position]?.type === \"LBRACKET\") {\n          const values = [];\n          position++; // skip [\n\n          while (position < tokens.length && tokens[position]?.type !== \"RBRACKET\") {\n            if (tokens[position]?.type === \"VALUE\") {\n              values.push(tokens[position].value);\n            }\n            position++;\n            if (tokens[position]?.type === \"COMMA\") {\n              position++; // skip comma\n            }\n          }\n\n          if (tokens[position]?.type === \"RBRACKET\") {\n            position++; // skip ]\n          }\n\n          value = values;\n        } else if (tokens[position]?.type === \"VALUE\") {\n          value = tokens[position].value;\n          position++;\n        } else {\n          throw new Error(`Expected value at position ${position}`);\n        }\n\n        return {\n          node: {\n            type: \"CONDITION\",\n            field: field.value,\n            operator: operator.value,\n            value: value,\n          },\n          position,\n        };\n      },\n\n      _processFilterAST(node, refinementList, numericMenu) {\n        if (!node) return;\n\n        if (node.type === \"AND\") {\n          this._processFilterAST(node.left, refinementList, numericMenu);\n          this._processFilterAST(node.right, refinementList, numericMenu);\n        } else if (node.type === \"OR\") {\n          this._processOrCondition(node, refinementList, numericMenu);\n        } else if (node.type === \"CONDITION\") {\n          this._processCondition(node, refinementList, numericMenu);\n        }\n      },\n\n      _processOrCondition(node, refinementList, numericMenu) {\n        const conditions = this._collectOrConditions(node);\n\n        const fieldGroups = {};\n        conditions.forEach((condition) => {\n          if (!fieldGroups[condition.field]) {\n            fieldGroups[condition.field] = [];\n          }\n          fieldGroups[condition.field].push(condition);\n        });\n\n        Object.keys(fieldGroups).forEach((field) => {\n          const fieldConditions = fieldGroups[field];\n          fieldConditions.forEach((condition) => {\n            this._processCondition(condition, refinementList, numericMenu);\n          });\n        });\n      },\n\n      _collectOrConditions(node) {\n        if (node.type === \"CONDITION\") {\n          return [node];\n        } else if (node.type === \"OR\") {\n          return [...this._collectOrConditions(node.left), ...this._collectOrConditions(node.right)];\n        }\n        return [];\n      },\n\n      _processCondition(condition, refinementList, numericMenu) {\n        const { field, operator, value } = condition;\n\n        if (this._isNumericCondition(operator, value)) {\n          this._processNumericCondition(field, operator, value, numericMenu);\n        } else {\n          this._processFacetCondition(field, value, refinementList);\n        }\n      },\n\n      _isNumericCondition(operator, value) {\n        return (\n          [\":<=\", \":>=\", \":<\", \":>\", \"<=\", \">=\", \"<\", \">\"].includes(operator) ||\n          (Array.isArray(value) && value.length === 1 && this._isRangePattern(value[0]))\n        );\n      },\n\n      _isRangePattern(str) {\n        if (typeof str !== \"string\") return false;\n\n        const dotDotIndex = str.indexOf(\"..\");\n        if (dotDotIndex === -1) return false;\n\n        const start = str.substring(0, dotDotIndex);\n        const end = str.substring(dotDotIndex + 2);\n\n        return this._isNumericValue(start) && this._isNumericValue(end);\n      },\n\n      _isNumericValue(str) {\n        if (!str || str.trim() === \"\") return false;\n        const trimmed = str.trim();\n\n        const num = parseFloat(trimmed);\n        return !isNaN(num) && isFinite(num) && trimmed === num.toString();\n      },\n\n      _parseRangePattern(str) {\n        const dotDotIndex = str.indexOf(\"..\");\n        if (dotDotIndex === -1) return null;\n\n        const start = str.substring(0, dotDotIndex).trim();\n        const end = str.substring(dotDotIndex + 2).trim();\n\n        if (this._isNumericValue(start) && this._isNumericValue(end)) {\n          return { start, end };\n        }\n\n        return null;\n      },\n\n      _removeQuotes(str) {\n        if (typeof str !== \"string\" || str.length < 2) {\n          return str;\n        }\n\n        const quoteChars = ['\"', \"'\", \"`\"];\n        const first = str[0];\n        const last = str[str.length - 1];\n\n        if (quoteChars.includes(first) && first === last) {\n          return str.substring(1, str.length - 1);\n        }\n\n        let start = 0;\n        while (start < str.length && quoteChars.includes(str[start])) {\n          start++;\n        }\n\n        let end = str.length - 1;\n        while (end >= start && quoteChars.includes(str[end])) {\n          end--;\n        }\n\n        return str.substring(start, end + 1);\n      },\n\n      _createStateKey(uiState) {\n        let key = \"\";\n\n        if (uiState.refinementList) {\n          key += \"r:\" + Object.keys(uiState.refinementList).sort().join(\",\");\n        }\n\n        if (uiState.numericMenu) {\n          key += \"n:\" + Object.keys(uiState.numericMenu).sort().join(\",\");\n        }\n\n        if (uiState.sortBy) {\n          key += \"s:\" + uiState.sortBy;\n        }\n\n        return key;\n      },\n\n      _processNumericCondition(field, operator, value, numericMenu) {\n        if (operator === \":<=\" || operator === \"<=\" || operator === \":<\" || operator === \"<\") {\n          numericMenu[field] = `:${value}`;\n        } else if (operator === \":>=\" || operator === \">=\" || operator === \":>\" || operator === \">\") {\n          numericMenu[field] = `${value}:`;\n        } else if (Array.isArray(value) && value.length === 1) {\n          const rangeData = this._parseRangePattern(value[0]);\n          if (rangeData) {\n            numericMenu[field] = `${rangeData.start}:${rangeData.end}`;\n          }\n        }\n      },\n\n      _processFacetCondition(field, value, refinementList) {\n        const values = Array.isArray(value) ? value : [value];\n\n        values.forEach((val) => {\n          const cleanValue = typeof val === \"string\" ? this._removeQuotes(val) : val;\n          this._addToRefinementList(refinementList, field, cleanValue);\n        });\n      },\n\n      _addToRefinementList(refinementList, fieldName, value) {\n        if (!refinementList[fieldName]) {\n          refinementList[fieldName] = [];\n        }\n\n        if (!refinementList[fieldName].includes(value)) {\n          refinementList[fieldName].push(value);\n        }\n      },\n\n      _setInstantSearchUiState(uiStateToApply, instantSearchInstance) {\n        const currentUiState = instantSearchInstance.getUiState();\n        const indexName = instantSearchInstance.mainIndex.getIndexName();\n\n        const newIndexState = { ...currentUiState[indexName] };\n\n        if (uiStateToApply.refinementList) {\n          newIndexState.refinementList = {\n            ...newIndexState.refinementList,\n            ...uiStateToApply.refinementList,\n          };\n        }\n\n        if (uiStateToApply.numericMenu) {\n          newIndexState.numericMenu = {\n            ...newIndexState.numericMenu,\n            ...uiStateToApply.numericMenu,\n          };\n        }\n\n        if (uiStateToApply.sortBy) {\n          newIndexState.sortBy = `${indexName}/sort/${uiStateToApply.sortBy}`;\n        }\n\n        const newUiState = {\n          ...currentUiState,\n          [indexName]: newIndexState,\n        };\n\n        try {\n          connectorState.settingState = true;\n\n          instantSearchInstance.setUiState(newUiState);\n\n          setTimeout(() => {\n            connectorState.settingState = false;\n          }, 50);\n        } catch (error) {\n          console.error(\"[NaturalLanguageSync] Error setting UI state:\", error);\n          connectorState.settingState = false;\n        }\n      },\n    };\n  };\n}\n\n/**\n * Natural Language Sync Widget\n * A headless widget that automatically synchronizes natural language search results\n * with InstantSearch UI state\n */\nexport function naturalLanguageSync(params = {}) {\n  const { debug = false, onStateChange } = params;\n\n  const render = () => {};\n\n  const dispose = () => {};\n\n  const createWidget = connectNaturalLanguageSync(render, dispose);\n\n  return {\n    ...createWidget({ debug, onStateChange }),\n    $$widgetType: \"typesense.naturalLanguageSync\",\n  };\n}\n\nexport default naturalLanguageSync;\n\n"],"mappings":"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","ignoreList":[]}